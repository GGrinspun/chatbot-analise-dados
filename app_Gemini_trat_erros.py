import streamlit as st
import matplotlib.pyplot as plt
from s3_reader import carregar_csv_do_s3
import google.generativeai as genai
import os
from dotenv import load_dotenv
import re
import traceback
import logging
from google.api_core.exceptions import GoogleAPIError

# Configurar logging
logging.basicConfig(level=logging.INFO)

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar API Key do Gemini
api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    st.error("API Key da Gemini n√£o encontrada. Defina GEMINI_API_KEY no seu .env.")
    st.stop()
genai.configure(api_key=api_key)

# Criar modelo
model = genai.GenerativeModel("gemini-1.5-flash-latest")

# Carregar dataset do S3
df = carregar_csv_do_s3()

st.title("ü§ñ Chatbot de An√°lise de Dados com Gemini")

# Mostrar dataset
if st.checkbox("Mostrar dataset"):
    st.dataframe(df)

# Formul√°rio para entrada de pergunta com bot√£o de envio
with st.form(key="pergunta_form"):
    pergunta = st.text_input("Fa√ßa uma pergunta sobre os dados:", "")
    submitted = st.form_submit_button("Enviar")

def executar_codigo(codigo, df, plt):
    """
    Executa o c√≥digo Python recebido com acesso completo.
    """
    exec_locals = {"df": df.copy(), "plt": plt}
    exec(codigo, globals(), exec_locals)
    return exec_locals

if submitted and pergunta:
    st.write("üîç Interpretando sua pergunta com IA...")

    # Prompt para Gemini
    prompt = f"""
Voc√™ √© um cientista de dados experiente utilizando pandas e matplotlib.

Considere que voc√™ est√° fazendo an√°lise em um DataFrame chamado `df`, que j√° est√° carregado e cont√©m as seguintes colunas:

- `REF_DATE`: datas no formato datetime.
- `TARGET`: valores bin√°rios, apenas 0 e 1.
- `SEXO`: strings "M" e "F".
- `IDADE`: valores como 34.137 (idade em anos, possivelmente com decimais).
- `OBITO`: muitos valores como "none" (pode conter valores ausentes ou nulos).
- `Unidade Federativa`: siglas dos estados do Brasil, como "PE", "RO", etc.
- `CLASSE SOCIAL`: categorias como "D", "E", "B".

Com base na seguinte pergunta, gere **somente o c√≥digo Python** que:

- Use exclusivamente o DataFrame `df` como fonte de dados.
- Armazene o resultado em uma vari√°vel chamada `resultado`, se a pergunta envolver uma resposta tabular ou estat√≠stica.
- Se a pergunta exigir visualiza√ß√£o, utilize `matplotlib.pyplot` e chame `plt.show()` ao final do gr√°fico.
- N√£o utilize `print()` nem leia ou salve arquivos.
- Retorne apenas o c√≥digo limpo e funcional, com no m√°ximo 2 coment√°rios explicativos usando '#'.

Agora, responda com **somente o c√≥digo** para a seguinte pergunta:

Pergunta: {pergunta}
"""

    try:
        with st.spinner("Consultando IA e executando c√≥digo..."):
            response = model.generate_content(prompt)

        codigo = re.sub(r"```(?:python)?", "", response.text).strip()
        codigo = codigo.replace("```", "").strip()

        st.code(codigo, language='python')
        logging.info(f"C√≥digo gerado:\n{codigo}")

        exec_locals = executar_codigo(codigo, df, plt)

        # Mostrar resultado se existir
        resultado = exec_locals.get("resultado")
        if resultado is not None:
            st.write("üìä Resultado:")
            st.write(resultado)

        # Exibir todos os gr√°ficos gerados
        figs = plt.get_fignums()
        if figs:
            for fig_num in figs:
                fig = plt.figure(fig_num)
                st.pyplot(fig)
                plt.close(fig)

    except GoogleAPIError as api_err:
        st.error(f"Erro na API Gemini: {api_err}")

    except Exception as e:
        st.error("‚ùå Erro ao processar a pergunta.")
        trace_text = traceback.format_exc()
        st.code(trace_text, language="python")

        # ‚úÖ NOVO BLOCO: gerar explica√ß√£o com IA sobre o erro
        try:
            explicacao_prompt = f"""
Sou um analista de dados e encontrei o seguinte erro ao executar um c√≥digo em Python com pandas e matplotlib:

{trace_text}

Com base nesse erro, explique de forma simples e objetiva qual foi a prov√°vel causa e como corrigir.
Considere que o DataFrame `df` possui as seguintes colunas:
{list(df.columns)}

Explique como se estivesse ajudando um usu√°rio iniciante a entender o problema.
"""
            with st.spinner("Analisando erro com IA..."):
                explicacao_erro = model.generate_content(explicacao_prompt).text
                st.markdown("### ü§ñ Explica√ß√£o do erro:")
                st.markdown(explicacao_erro)

        except Exception as explicacao_falhou:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel gerar explica√ß√£o para o erro.")
